trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)


stages:
- stage: TerraformValidate
  jobs:
  - job: TerraformValidateJob
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Artifact
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'''
        artifact: 'terraform-manifests-out'
        publishLocation: 'pipeline'
    - task: TerraformInstaller@1
      inputs:
        terraformVersion: 'latest'

    - task: TerraformCLI@1
      inputs:
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        backendType: 'azurerm'
        backendServiceArm: 'terraform-aks-azurerm-svc-con'
        backendAzureRmResourceGroupName: 'terraform-storage-rg'
        backendAzureRmStorageAccountName: 'terraformstatexlrw'
        backendAzureRmContainerName: 'newfile'
        backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
        allowTelemetryCollection: false
    - task: TerraformCLI@1
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)//terraform-manifests-out'
        allowTelemetryCollection: true

    - task: TerraformCLI@1
      inputs:
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)//terraform-manifests-out'
        environmentServiceName: 'terraform-aks-azurerm-svc-con'
        commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
        allowTelemetryCollection: false