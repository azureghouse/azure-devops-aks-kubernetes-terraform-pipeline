trigger:
- master

variables:
- name: DEV_ENVIRONMENT
  value: dev 
- name: QA_ENVIRONMENT
  value: qa

pool:
  name: 'Default'

# Stage-1: Terraform Validate Stage
## Step-1: Publish Artifacts to Pipeline (Pipeline artifacts provide a way to share files between stages in a pipeline or between different pipelines. )
## Step-2: Install Latest Terraform (0.13.5) (Ideally not needed if we use default Ubuntu Agents)
## Step-3: Validate Terraform Manifests (terraform init, terraform validate)


stages:
  - stage: Build
    jobs:
      - job: TerraformValidateJob
        steps:

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
            artifact: 'terraform-manifests-out'
            publishLocation: 'pipeline'
        # - task: TerraformInstaller@1
        #   displayName: terraform install 
        #   inputs:
        #     terraformVersion: 'latest'
        # # - task: TerraformCLI@1
        #   displayName: terraform init 
        #   inputs:
        #     command: 'init'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        #     allowTelemetryCollection: true

        # - task: TerraformCLI@1
        #   displayName: terraform validate 
        #   inputs:
        #     command: 'validate'
        #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        #     allowTelemetryCollection: false


  - stage: DeployAKSClusters
    jobs: 
     - deployment: DeployDevAKSCluster
       displayName: DeployDevAKSCluster
       #dependsOn: Build
       pool:
         vmImage: 'ubuntu-latest'
       environment: $(DEV_ENVIRONMENT)
       strategy:
         runOnce:
           deploy:
             steps:
              # - task: DownloadSecureFile@1
              #   inputs:
              #     secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
              #     retryCount: '20'
              # - task: TerraformCLI@1
              #   displayName: terraform init
              #   inputs:
              #     command: 'init'
              #     workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
              #     allowTelemetryCollection: true

              - task: TerraformTaskV4@4
                inputs:
                  provider: 'azurerm'
                  command: 'init'
                  workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
                  backendServiceArm: 'terraform-aks-azurerm-svc-con'
                  backendAzureRmResourceGroupName: 'sc'
                  backendAzureRmStorageAccountName: 'mystoregeiouy'
                  backendAzureRmContainerName: 'myfile'
                  backendAzureRmKey: 'firstkey'
              - task: TerraformCLI@1
                displayName: terraform plan 
                inputs:
                  command: 'plan'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  commandOptions: '$(System.DefaultWorkingDirectory)/terraform/terraform-manifests/aks-terraform-devops-ssh-key-ububtu .pub-manifests'
                  allowTelemetryCollection: true

              - task: TerraformCLI@1
                displayName: terraform apply
                inputs:
                  command: 'apply'
                  workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                  environmentServiceName: 'terraform-aks-azurerm-svc-con'
                  allowTelemetryCollection: false

